- name: install dependencies
  ansible.builtin.package:
    name: acl
    state: present

- name: create download folder for ipfs-cluster
  become: yes
  file:
    state: directory
    owner: root
    group: root
    dest: /opt/ipfs-cluster/{{ipfs_cluster_version}}

- name: download and unpack IPFS Cluster
  when: not ansible_check_mode
  block:
    - name: download IPFS Cluster
      become: yes
      get_url:
        url: "{{ dist_url }}/{{ item }}/{{ipfs_cluster_version}}/{{ item }}_{{ipfs_cluster_version}}_linux-{{ipfs_cluster_arch}}.tar.gz"
        dest: /opt/ipfs-cluster/{{ipfs_cluster_version}}/{{ item }}.tar.gz
        timeout: 30
      with_items:
        - ipfs-cluster-service
        - ipfs-cluster-ctl

    - name: unpack IPFS cluster
      become: yes
      unarchive:
        remote_src: yes
        src: /opt/ipfs-cluster/{{ipfs_cluster_version}}/{{ item }}.tar.gz
        dest: /opt/ipfs-cluster/{{ipfs_cluster_version}}/
        creates: /opt/ipfs-cluster/{{ipfs_cluster_version}}/{{ item }}
      with_items:
        - ipfs-cluster-service
        - ipfs-cluster-ctl

    - name: link ipfs cluster executables
      become: yes
      file:
        state: link
        owner: root
        group: root
        dest: /usr/local/bin/{{ item }}
        src: /opt/ipfs-cluster/{{ipfs_cluster_version}}/{{ item }}/{{ item }}
      with_items:
        - ipfs-cluster-service
        - ipfs-cluster-ctl

- name: install ipfs-cluster init service
  become: yes
  template:
    src: etc/systemd/system/ipfs-cluster.service
    dest: /etc/systemd/system/ipfs-cluster.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart IPFS Cluster
  when:
    - not (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA")
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<'))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))

- name: install ipfs-custer init service
  become: yes
  template:
    src: etc/init.d/ipfs-cluster
    dest: /etc/init.d/ipfs-cluster
    owner: root
    group: root
    mode: 0744
  notify:
    - restart IPFS Cluster
  when:
    - (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA") or
      (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<')) or
      (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))

- name: make .ipfs-cluster directory
  become: yes
  file:
    state: directory
    mode: 0700
    owner: ipfs
    group: ipfs
    dest: "{{ ipfs_home }}/.ipfs-cluster"

- name: copy configuration
  become: yes
  template:
    src: "{{ item }}"
    dest: "{{ ipfs_home }}/.ipfs-cluster/{{ item }}"
    mode: 0600
    owner: ipfs
    group: ipfs
  tags:
    - config
  with_items:
    - identity.json
    - service.json
    - follower.json
  notify: restart IPFS Cluster

- name: set version file (to notify restart on upgrades)
  become: yes
  copy:
    content: "{{ ipfs_cluster_version }}"
    dest: "{{ ipfs_home }}/cluster_deployed_version"
    mode: 0644
    owner: ipfs
    group: ipfs
  notify: restart IPFS Cluster

- name: copy peerstore
  become: yes
  template:
    src: peerstore
    dest: "{{ ipfs_home }}/.ipfs-cluster/peerstore"
    mode: 0600
    owner: ipfs
    group: ipfs
    force: false # do not overwrite
  tags:
    - config
  notify: restart IPFS Cluster


- name: reload systemd
  become: yes
  systemd:
    daemon_reload: yes
    name: ipfs-cluster
  when:
    - not (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA")
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<'))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))


- name: enable and start IPFS Cluster
  become: yes
  service:
    name: ipfs-cluster
    state: started
    enabled: yes

# copy follower config locally (this can be removed eventually, just a convenience)
- name: generate follower config
  tags: follower
  run_once: true
  connection: local
  block:
    - name: make output directory
      file:
        state: directory
        dest: dist/follower
    - name: create follower service.json
      delegate_to: localhost
      template:
        src: follower.json
        dest: dist/follower/service.json

# generate follower config on cluster
- name: pin follower config
  tags: follower
  run_once: true
  block:
    - name: add file to cluster
      register: file_added
      become: yes
      become_user: ipfs
      ansible.builtin.command: /usr/local/bin/ipfs-cluster-ctl add follower.json --name follower-config
      args:
        chdir: "{{ ipfs_home }}/.ipfs-cluster/"

    - name: print follower init command
      debug:
        msg: "ipfs-cluster-follow {{ ipfs_cluster_crdt_cluster_name }} init http://127.0.0.1:8080/ipfs/{{ file_added.stdout.split(' ')[1] }}"

